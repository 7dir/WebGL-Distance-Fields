// Bicubic hermite texture sampling
// Based on http://computergraphics.stackexchange.com/a/29 by Alan Wolfe
// Licensed under CC-BY-NC-SA 3.0: https://creativecommons.org/licenses/by-nc-sa/3.0/us/

varying vec2 vUv;

uniform sampler2D tDiffuse;
uniform float texw;
uniform float texh;

vec3 cubicHermite(vec3 A, vec3 B, vec3 C, vec3 D, float t)
{
	float t2 = t * t;
	float t3 = t * t * t;
	vec3 a = -A / 2.0 + (3.0 * B) / 2.0 - (3.0 * C) / 2.0 + D / 2.0;
	vec3 b = A - (5.0 * B) / 2.0 + 2.0 * C - D / 2.0;
	vec3 c = -A / 2.0 + C / 2.0;
	vec3 d = B;
	
	return a * t3 + b * t2 + c * t + d;
}

void main()
{
	float oneH = 1.0 / texw;
	float oneV = 1.0 / texh;
	float twoH = 2.0 / texw;
	float twoV = 2.0 / texh;
	
	vec2 pixel = vUv * vec2(texw, texh) + vec2(0.5); // Center of the current pixel
	vec2 f = fract(pixel); // Fractional part
	pixel = floor(pixel) / vec2(texw, texh) - vec2(oneH / 2.0, oneV / 2.0);
	
	vec3 C00 = texture2D(tDiffuse, pixel + vec2(-oneH, -oneV)).rgb;
	vec3 C10 = texture2D(tDiffuse, pixel + vec2(0.0 ,-oneV)).rgb;
	vec3 C20 = texture2D(tDiffuse, pixel + vec2(oneH, -oneV)).rgb;
	vec3 C30 = texture2D(tDiffuse, pixel + vec2(twoH, -oneV)).rgb;
	
	vec3 C01 = texture2D(tDiffuse, pixel + vec2(-oneH, 0.0)).rgb;
	vec3 C11 = texture2D(tDiffuse, pixel + vec2(0.0, 0.0)).rgb;
	vec3 C21 = texture2D(tDiffuse, pixel + vec2(oneH, 0.0)).rgb;
	vec3 C31 = texture2D(tDiffuse, pixel + vec2(twoH, 0.0)).rgb;
	
	vec3 C02 = texture2D(tDiffuse, pixel + vec2(-oneH, oneV)).rgb;
	vec3 C12 = texture2D(tDiffuse, pixel + vec2(0.0, oneV)).rgb;
	vec3 C22 = texture2D(tDiffuse, pixel + vec2(oneH, oneV)).rgb;
	vec3 C32 = texture2D(tDiffuse, pixel + vec2(twoH, oneV)).rgb;
	
	vec3 C03 = texture2D(tDiffuse, pixel + vec2(-oneH, twoV)).rgb;
	vec3 C13 = texture2D(tDiffuse, pixel + vec2(0.0, twoV)).rgb;
	vec3 C23 = texture2D(tDiffuse, pixel + vec2(oneH, twoV)).rgb;
	vec3 C33 = texture2D(tDiffuse, pixel + vec2(twoH, twoV)).rgb;
	
	vec3 CP0X = cubicHermite(C00, C10, C20, C30, f.x);
	vec3 CP1X = cubicHermite(C01, C11, C21, C31, f.x);
	vec3 CP2X = cubicHermite(C02, C12, C22, C32, f.x);
	vec3 CP3X = cubicHermite(C03, C13, C23, C33, f.x);
	
	vec3 final = cubicHermite(CP0X, CP1X, CP2X, CP3X, f.y);
	
	gl_FragColor = vec4(final, 1.0);
}